//------------------------------------------------
//--- 010 Editor v2.0 Binary Template
//
//      File: AgeOfMythologyReplay.bt
//    Author: ViRb3
//   Version: 1.0
//   Purpose: Parse Age of Mythology Retold replay files.
//  Category: Game
// File Mask: *.mythrec*
//  ID Bytes: [+4] 52 47 //????RG
//   History:
//   1.0   2025-07-24  Initial release based on restoration parser
//
// This template parses Age of Mythology Retold replay data.
// NOTE: The replay must have its l33t compression removed inplace first.
//------------------------------------------------

LittleEndian();

const int DATA_OFFSET = 6;
const string ROOT_NODE_TOKEN = "BG";

local int COLOR_HEADER = cLtGray;
local int COLOR_PROFILE_KEYS = cLtBlue;
local int COLOR_XMB = cLtGreen;
local int COLOR_COMMANDS = cLtYellow;
local int COLOR_BUILD_INFO = cDkPurple;
local int COLOR_XMB_MAP = cDkRed;
local int COLOR_NODES = cLtRed;
local int COLOR_WORLD_OBJECTS = cLtAqua;

typedef struct {
    ushort numChars;
    ushort padding;
    if (numChars > 0) {
        ushort chars[numChars] <format=hex>;
    }
} UTF16String <read=ReadUTF16String>;

string ReadUTF16String(UTF16String &str) {
    local string result = "";
    local int i;
    if (str.numChars > 0) {
        for (i = 0; i < str.numChars; i++) {
            result += (char)(str.chars[i] & 0xFF);
        }
    }
    return result;
}

typedef struct {
    int32 x;
    int32 y;
    int32 z;
} Vector3;

// ==============================================================================================================================
// XMB
// ==============================================================================================================================

struct XMBNode;

typedef struct {
    uint32 attributeNameIdx;
    UTF16String attributeValue;
} XMBAttribute<read=ReadUTF16String(this.attributeValue)>;

typedef struct {
    local int nodeStart = FTell();
    
    char xn[2];
    if (xn != "XN") {
        Printf("Invalid XN marker at offset %d: %s\n", startof(xn), xn);
        Exit(1); 
    }
    
    uchar unknown1[4];
    
    UTF16String value;
    
    uint32 nameIdx;
    uchar unknown2[4];
    
    uint32 numAttributes;
    if (numAttributes > 0) {
        XMBAttribute attribute[numAttributes] <optimize=false>;
    }
    
    uint32 numChildren;
    if (numChildren > 0) {
        XMBNode childNode[numChildren] <optimize=false>;
    }

} XMBNode<read=ReadUTF16String(this.value)>;

typedef struct {
    char x1[2];
    if (x1 != "X1") {
        Printf("Invalid X1 marker at offset %d: %s\n", startof(x1), x1);
        Exit(1);
    }
    uchar padding1[4];
    char xr[2];
    if (xr != "XR") {
        Printf("Invalid XR marker at offset %d: %s\n", startof(xr), xr);
        Exit(1);
    }
    uint32 unk1;
    if (unk1 != 4) {
        Printf("Invalid unk1 marker at offset %d: %d\n", startof(unk1), unk1);
        Exit(1);
    }
    uint32 version;
    if (version != 8) {
        Printf("Invalid version marker at offset %d: %d\n", startof(version), version);
        Exit(1);
    }

    uint32 numElements;
    if (numElements > 0) {
        UTF16String element[numElements] <optimize=false>;
    }
    
    uint32 numAttributes;
    if (numAttributes > 0) {
        UTF16String attribute[numAttributes]  <optimize=false>;
    }

    XMBNode rootNode;

} XMBFile; //<size=(parentof(this).dataLength)>;

typedef struct {
    UTF16String str1;
    UTF16String xmbName;
    XMBFile xmbFile <bgcolor=COLOR_XMB>;
} XmbMapFile;

typedef struct (int dataEnd) {
    uchar unknown;
    uint32 numFiles;
    if (numFiles == 1) {
        XMBFile xmbFile <bgcolor=COLOR_XMB>;
    } else if (numFiles > 1) {
        XmbMapFile file[numFiles] <optimize=false>;
    }
} XmbMap;

// ==============================================================================================================================
// ProfileKey
// ==============================================================================================================================

enum <int32> ProfileKeyType {
    PROFILE_UINT32 = 1,
    PROFILE_INT32 = 2,
    PROFILE_GAMESYNCSTATE = 3,
    PROFILE_INT16 = 4,
    PROFILE_BOOL = 6,
    PROFILE_STRING = 10
};

typedef struct {
    UTF16String keyName;
    ProfileKeyType keyType;
    switch (keyType) {
        // not confirmed, all encountered values so far are 0
        case PROFILE_UINT32:
            uint32 uint32Value;
            break;
        case PROFILE_INT32:
            int32 int32Value;
            break;
        case PROFILE_GAMESYNCSTATE:
            uchar gameSyncState[8];
            break;
        // not confirmed, all encountered values so far are 0
        case PROFILE_INT16:
            int16 int16Value;
            break;
        case PROFILE_BOOL:
            uchar boolValue;
            break;
        case PROFILE_STRING:
            UTF16String stringValue;
            break;
        default:
            Printf("Unknown profile key type at offset %d: %d\n", startof(keyType), keyType);
            break;
    }
} ProfileKey <read=ReadUTF16String(this.keyName)>;

typedef struct {
    uint32 unknown;
    uint32 numKeys;
    ProfileKey profileKey[numKeys] <optimize=false>;
} ProfileKeys;


// ==============================================================================================================================
// BuildInfo
// ==============================================================================================================================

typedef struct {
    UTF16String build;
} BuildInfo;

// ==============================================================================================================================
// RecordedGameWorldObject
// ==============================================================================================================================

typedef struct {
    uint32 id;
    uint32 protoUnit;
    short unk;
    float positionX;
    float positionZ;
} RecordedGameWorldObject;

// ==============================================================================================================================
// Node
// ==============================================================================================================================

struct Node;

string getNodePath(Node &node) {
    return _getNodePath(node, "");
}

string _getNodePath(Node &node, string path) {
    if (path == "") {
        path = node.token;
    } else {
        path = node.token + "/" + path;
    }
    if (exists(parentof(node))) {
        return _getNodePath(parentof(node), path);
    } else {
        return path;
    }
}

void commitPadding(int i) {
    local int space = i - FTell();
    if (space > 0) {
        // make sure we don't miss any XMBs with our current assumption that they exist only in one node
        local int xmbMatch = FindFirst("58 31 ?? ?? ?? ?? 58 52 04 00 00 00 08 00 00 00,h", 
                                true, false, FINDMETHOD_WILDCARDS, 0.0, 1, FTell(), space);
        if (xmbMatch != -1) {
            Printf("Found unexpected XMB at offset %d\n", xmbMatch);
            Exit(1);
        }
        struct (int space) {
            byte data[space];
        } data(space);
    }
}

typedef struct {
    char token[2];
    uint32 dataLength;
    if (dataLength > 0) {
        local uint32 dataStart = FTell();
        local uint32 dataEnd = dataStart + dataLength;
        local int i = dataStart;
        switch (getNodePath(this)) {
            case "BG/MP/ST":
                ProfileKeys profileKeys <bgcolor=COLOR_PROFILE_KEYS>;
                i = dataEnd;
                break;
            case "BG/FH":
                BuildInfo buildInfo <bgcolor=COLOR_BUILD_INFO>;
                i = dataEnd;
                break;
            case "BG/GM/GD/gd":
                XmbMap xmbMap(dataEnd) <bgcolor=COLOR_XMB_MAP>;
                i = dataEnd;
                break;
            case "BG/J1/KB/KB/K9":
                RecordedGameWorldObject recordedGameWorldObject <bgcolor=COLOR_WORLD_OBJECTS>;
                i = dataEnd;
                break;
            default:
                // use heuristics to detect child nodes without knowing their structure
                // TODO: only recurse known containers? BG, J1, PL, BP, MP, GM, GD
                local int nodeMatch = -1;
                while (i < dataEnd) {
                    nodeMatch = FindFirst("[A-Za-z0-9]{2}", true, false, FINDMETHOD_REGEX, 0.0, 1, i, dataEnd-i);
                    if (nodeMatch != -1 && nodeMatch + ReadUInt(nodeMatch+2) <= dataEnd) {
                        commitPadding(nodeMatch);
                        Node node;
                        i = FTell();
                    } else {
                        i = dataEnd;
                    }
                }
        }
        commitPadding(i);
    }
} Node <read=(this.token),size=(6 + ReadUInt(startof(this) + 2))>;

// ==============================================================================================================================
// Game Commands
// ==============================================================================================================================

enum <uchar> GameCommandType {
    CMD_TASK = 0,
    CMD_RESEARCH = 1,
    CMD_TRAIN = 2,
    CMD_BUILD = 3,
    CMD_SET_GATHER_POINT = 4,
    CMD_DELETE = 7,
    CMD_STOP = 9,
    CMD_PROTO_POWER = 12,
    CMD_BUY_SELL_RESOURCES = 13,
    CMD_UNGARRISON = 14,
    CMD_RESIGN = 16,
    CMD_UNKNOWN_18 = 18,
    CMD_TRIBUTE = 19,
    CMD_FINISH_UNIT_TRANSFORM = 23,
    CMD_SET_UNIT_STANCE = 25,
    CMD_CHANGE_DIPLOMACY = 26,
    CMD_TOWN_BELL = 34,
    CMD_AUTO_SCOUT_EVENT = 35,
    CMD_CHANGE_CONTROL_GROUP = 37,
    CMD_REPAIR = 38,
    CMD_TAUNT = 41,
    CMD_CHEAT = 44,
    CMD_CANCEL_QUEUED_ITEM = 45,
    CMD_SET_FORMATION = 48,
    CMD_START_UNIT_TRANSFORM = 53,
    CMD_UNKNOWN_55 = 55,
    CMD_AUTOQUEUE = 66,
    CMD_TOGGLE_AUTO_UNIT_ABILITY = 67,
    CMD_TIME_SHIFT = 68,
    CMD_BUILD_WALL_CONNECTOR = 69,
    CMD_SEEK_SHELTER = 71,
    CMD_PREQUEUE_TECH = 72,
    CMD_PREBUY_GOD_POWER = 75
};

typedef struct {
    uchar extraByteCount;
    if (extraByteCount > 0) {
        uchar extraBytes[extraByteCount];
    }
    uchar unk;
    if (unk == 0) {
        uchar padding[8];
    } else if (unk != 1) {
        Printf("Footer unk not 0 or 1 at offset %d: %d\n", startof(unk), unk);
        Exit(1);
    }
    
    ushort intDataCount;
    uchar padding2[2];
    if (intDataCount > 0) {
        uint32 intData[intDataCount];
    }
} Footer;

typedef struct {
    uchar header[10];
    local GameCommandType commandType = (GameCommandType)header[1];
    
    if (commandType == 14) {
        uchar extraHeader[20];
    } else {
        uchar extraHeader[8];
    }
    
    uint32 three;
    if (three != 3) {
        Printf("Expected 3 but got %d at offset %d\n", three, startof(three));
        Exit(1);
    }
    
    local int playerId;
    if (commandType == 19) {
        uint32 padding;
        playerId = header[7];
    } else {
        ushort one;
        if (one != 1) {
            Printf("Expected 1 but got %d at offset %d\n", one, startof(one));
            Exit(1);
        }
        ushort padding1;
        ushort playerIdShort;
        playerId = playerIdShort;
        ushort padding2;
    }
    
    uint32 padding3;
    ushort numUnits;
    ushort padding4;
    
    if (numUnits > 0) {
        uint32 sourceUnits[numUnits];
    }
    
    ushort numVectors;
    ushort padding5;
    
    if (numVectors > 0) {
        Vector3 sourceVectors[numVectors];
    }
    
    ushort numPreArgumentBytes;
    ushort padding6;
    
    local int totalPreArgBytes = 13 + numPreArgumentBytes;
    if (totalPreArgBytes > 0) {
        uchar preArgumentBytes[totalPreArgBytes];
    }

    switch (commandType) {
        case CMD_TASK:
            uint32 data[2];
            uint32 targetUnit;
            uint32 data2;
            Vector3 taskVector;
            float taskFloat;
            uint32 data3[3];
            break;
        case CMD_RESEARCH:
            uint32 researchData[2];
            uint32 techId;
            break;
        case CMD_TRAIN:
            uint32 data[2];
            uint32 protoUnit;
            uint32 data2;
            uint8 data3;
            uint8 quantity;
            break;
        case CMD_BUILD:
            uint32 data[2];
            uint32 protoUnit;
            Vector3 location;
            uint32 data2[2];
            float data3;
            uint32 data4[4];
            break;
        case CMD_SET_GATHER_POINT:
            uint32 data[2];
            Vector3 location;
            float data2;
            uint32 data3[2];
            break;
        case CMD_DELETE:
            uint32 data[2];
            uchar data2;
            break;
        case CMD_STOP:
            uint32 data[2];
            break;
        case CMD_PROTO_POWER:
            uint32 data[3];
            Vector3 location1;
            Vector3 location2;
            uint32 data2[2];
            float data3;
            uint32 data4;
            uint32 protoPower;
            uchar data5;
            break;
        case CMD_BUY_SELL_RESOURCES:
            uint32 data[2];
            uint32 resourceId;
            uint32 data2;
            float quantity;
            break;
        case CMD_UNGARRISON:
            uint32 data[2];
            break;
        case CMD_RESIGN:
            uint32 data[2];
            uint32 resigningPlayer;
            uint32 data2[2];
            uchar isAcknowledgement;
            break;
        case CMD_UNKNOWN_18:
            uint32 data[3];
            break;
        case CMD_TRIBUTE:
            uint32 data[2];
            uint32 resourceId;
            uint32 sendToPlayer;
            float quantity;
            float data2;
            uchar data3;
            break;
        case CMD_FINISH_UNIT_TRANSFORM:
            uint32 data[2];
            uint32 protoUnit;
            uint32 data2;
            uchar data3[2];
            break;
        case CMD_SET_UNIT_STANCE:
            uint32 data[2];
            uchar stanceId;
            uchar data2;
            uint32 data3;
            break;
        case CMD_CHANGE_DIPLOMACY:
            uint32 data[2];
            uchar diplomacyId;
            uint32 targetPlayer;
            break;
        case CMD_TOWN_BELL:
            uint32 data[2];
            break;
        case CMD_AUTO_SCOUT_EVENT:
            uint32 data[3];
            break;
        case CMD_CHANGE_CONTROL_GROUP:
            uint32 data[2];
            uchar action;
            uint32 data2;
            break;
        case CMD_REPAIR:
            uint32 data[2];
            uint32 target;
            break;
        case CMD_TAUNT:
            uint32 data[2];
            uint32 tauntId;
            uint32 data2[8];
            uchar data3;
            break;
        case CMD_CHEAT:
            uint32 data[2];
            uint32 cheatId;
            uint32 data2;
            break;
        case CMD_CANCEL_QUEUED_ITEM:
            uint32 data[5];
            break;
        case CMD_SET_FORMATION:
            uint32 data[2];
            uint32 formationId;
            uint32 data2;
            break;
        case CMD_START_UNIT_TRANSFORM:
            uint32 data[2];
            uint32 protoUnit;
            break;
        case CMD_UNKNOWN_55:
            uint32 data[2];
            Vector3 position;
            break;
        case CMD_AUTOQUEUE:
            uint32 data[2];
            uint32 protoUnit;
            break;
        case CMD_TOGGLE_AUTO_UNIT_ABILITY:
            uint32 data[2];
            uchar abilityIndex;
            break;
        case CMD_TIME_SHIFT:
            uint32 data[2];
            Vector3 location[2];
            break;
        case CMD_BUILD_WALL_CONNECTOR:
            uint32 data[2];
            uint32 protoUnit;
            Vector3 location[2];
            break;
        case CMD_SEEK_SHELTER:
            uint32 data[3];
            break;
        case CMD_PREQUEUE_TECH:
            uint32 data[2];
            uint32 techId;
            uchar data2;
            break;
        case CMD_PREBUY_GOD_POWER:
            uint32 data[2];
            uint32 protoPower;
            uint32 data2;
            break;    
        default:
            Printf("Unknown command at offset %d: %d\n", startof(commandType), commandType);
            Exit(1);
    }
} GameCommand <read=ReadGameCommand>;

string ReadGameCommand(GameCommand &cmd) {
    local string result;
    local string cmdName;
    switch (cmd.commandType) {
        case CMD_TASK: cmdName = "Task"; break;
        case CMD_RESEARCH: cmdName = "Research"; break;
        case CMD_TRAIN: cmdName = "Train"; break;
        case CMD_BUILD: cmdName = "Build"; break;
        case CMD_SET_GATHER_POINT: cmdName = "Set Gather Point"; break;
        case CMD_DELETE: cmdName = "Delete"; break;
        case CMD_STOP: cmdName = "Stop"; break;
        case CMD_PROTO_POWER: cmdName = "Proto Power"; break;
        case CMD_BUY_SELL_RESOURCES: cmdName = "Buy/Sell Resources"; break;
        case CMD_UNGARRISON: cmdName = "Ungarrison"; break;
        case CMD_RESIGN: cmdName = "Resign"; break;
        case CMD_UNKNOWN_18: cmdName = "Unknown 18"; break;
        case CMD_TRIBUTE: cmdName = "Tribute"; break;
        case CMD_FINISH_UNIT_TRANSFORM: cmdName = "Finish Unit Transform"; break;
        case CMD_SET_UNIT_STANCE: cmdName = "Set Unit Stance"; break;
        case CMD_CHANGE_DIPLOMACY: cmdName = "Change Diplomacy"; break;
        case CMD_TOWN_BELL: cmdName = "Town Bell"; break;
        case CMD_AUTO_SCOUT_EVENT: cmdName = "Auto Scout Event"; break;
        case CMD_CHANGE_CONTROL_GROUP: cmdName = "Change Control Group"; break;
        case CMD_REPAIR: cmdName = "Repair"; break;
        case CMD_TAUNT: cmdName = "Taunt"; break;
        case CMD_CHEAT: cmdName = "Cheat"; break;
        case CMD_CANCEL_QUEUED_ITEM: cmdName = "Cancel Queued Item"; break;
        case CMD_SET_FORMATION: cmdName = "Set Formation"; break;
        case CMD_START_UNIT_TRANSFORM: cmdName = "Start Unit Transform"; break;
        case CMD_UNKNOWN_55: cmdName = "Unknown 55"; break;
        case CMD_AUTOQUEUE: cmdName = "Autoqueue"; break;
        case CMD_TOGGLE_AUTO_UNIT_ABILITY: cmdName = "Toggle Auto Unit Ability"; break;
        case CMD_TIME_SHIFT: cmdName = "Time Shift"; break;
        case CMD_BUILD_WALL_CONNECTOR: cmdName = "Build Wall Connector"; break;
        case CMD_SEEK_SHELTER: cmdName = "Seek Shelter"; break;
        case CMD_PREQUEUE_TECH: cmdName = "Prequeue Tech"; break;
        case CMD_PREBUY_GOD_POWER: cmdName = "Prebuy God Power"; break;
        default: Printf("Missing command name: %d\n", cmd.commandType); Exit(1);
    }
    SPrintf(result, "%s (Player %d)", cmdName, cmd.playerId);
    return result;
}

typedef struct {
    uint32 entryType;
    uchar earlyByte;
    
    if ((entryType & 225) != entryType) {
        Printf("Bad entry type %d at offset %d\n", entryType, startof(entryType));
        Exit(1);
    }
    if ((entryType & 96) == 96) {
        Printf("Invalid entry type combination at offset %d\n", startof(entryType));
        Exit(1);
    }
    
    if ((entryType & 1) == 0) {
        uint32 padding1;
    } else {
        uchar padding2;
    }
    
    local int numCommands = 0;
    if ((entryType & 96) != 0) {
        if ((entryType & 32) != 0) {
            uchar numItems;
            numCommands = numItems;
        } else if ((entryType & 64) != 0) {
            uint32 numItems;
            numCommands = numItems;
        }
        
        GameCommand commands[numCommands] <optimize=false>;
    }
    
    if ((entryType & 128) != 0) {
        uchar numSelectedUnits;
        if (numSelectedUnits > 0 && numSelectedUnits < 100) {
            uint32 selectedUnits[numSelectedUnits];
        }
    }
    
    Footer footer;
    
    uint32 entryIdx;
    uchar finalByte;
    if (finalByte != 0) {
        Printf("Final byte not 0: %d at offset %d\n", finalByte, startof(finalByte));
        Exit(1);
    }
} CommandList <read=ReadCommandList>;

string ReadCommandList(CommandList &cmdList) {
    local string result;
    local float gameTime = cmdList.entryIdx / 20.0;
    local int cmdSize = 0;
    if (exists(cmdList.numItems)) {
        cmdSize = cmdList.numItems;
    }
    SPrintf(result, "Entry %d (%.2fs) - Type: %d - Commands: %d", cmdList.entryIdx, gameTime, cmdList.entryType, cmdSize);
    return result;
}

typedef struct (int commandCount, int dataStart) {
    local int64 footerPos = FindFirst("19 00 00 00,h", true, false, FINDMETHOD_NORMAL, 0.0, 1, dataStart);
    if (footerPos == -1) {
        Printf("Could not find game commands footer at offset %d\n", dataStart);
        Exit(1);
    }
    
    byte header[footerPos-FTell()-19];
        
    CommandList commandList[commandCount] <bgcolor=COLOR_COMMANDS,optimize=false>;
} GameCommands;

// ==============================================================================================================================
// Main parse logic
// ==============================================================================================================================

SetBackColor(COLOR_HEADER);

char header[23];
uint32 commandCount;
uint32 unknown;
char header2[232];
char svHeader[2];
if (svHeader != "sv") {
    Printf("SV header did not match at offset %d: %s\n", startof(svHeader), svHeader);
    Exit(1);
}
uint32 commandOffset;
uint32 unknownOffset;

if (ReadString(FTell(), 4) == "l33t") {
    Printf("L33t compression detected, skipping node parsing. To fix, please unpack first.\n");
    char nodeData[commandOffset-FTell()] <bgcolor=COLOR_NODES>;
} else {
    Node rootNode <bgcolor=COLOR_NODES>;
    if (rootNode.token != "BG") {
        Printf("Root node token not BG at offset %d: %s\n", startof(rootNode.token), rootNode.token);
        Exit(1);
    }
}

if (FTell() != commandOffset) {
    Printf("Command offset not at offset %d: %d\n", commandOffset, FTell());
    Exit(1);
}

GameCommands gameCommands(commandCount, commandOffset);
